* SwiftyWords
Project 8 of 100DaysOfSwift Challenge from HackingWithSwift.com

A quiz/puzzle game with words.

** Day 36
Constructing the layout in code. Autolayout, but also using Autoresizing for generating the layout of the buttons:
#+BEGIN_SRC Swift
let width = 150
let height = 80
        
for row in 0..<4 {
    for column in 0..<5 {
        let letterButton = UIButton(type: .system)
        letterButton.titleLabel?.font = UIFont.systemFont(ofSize: 36)
        letterButton.setTitle("WWW", for: .normal)

        let frame = CGRect(x: column * width, y: row * height, width: width, height: height)
        letterButton.frame = frame
        buttonsView.addSubview(letterButton)
        letterButtons.append(letterButton)
    }
}
#+END_SRC

[[Screen Shot 2019-09-13 at 5.49.25 PM.png]]

** Day 37
Adding a target to a button
#+BEGIN_SRC Swift
        let clear = UIButton(type: .system)
        clear.translatesAutoresizingMaskIntoConstraints = false
        clear.setTitle("CLEAR", for: .normal)
        clear.addTarget(self, action: #selector(clearTapped), for: .touchUpInside)
        view.addSubview(clear)
#+END_SRC
Made use of new functions:
 - array.firstIndex(of: String)
 - string.replacingOccurrences(of:with:)
 - string.components(separatedBy:)
 - array.joined(separator:)
 - string.trimmingCharacters(in: .whitespacesAndNewlines)

Property Observers (didSet) for keeping the UI updated.

[[Screen Shot 2019-09-14 at 2.27.00 PM.png]]
** Day 38 - Challenge
1. Use the techniques you learned in project 2 to draw a thin gray line around the buttons view, to make it stand out from the rest of the UI.
2. If the user enters an incorrect guess, show an alert telling them they are wrong. You’ll need to extend the submitTapped() method so that if firstIndex(of:) failed to find the guess you show the alert.
3. Try making the game also deduct points if the player makes an incorrect guess. Think about how you can move to the next level – we can’t use a simple division remainder on the player’s score any more, because they might have lost some points.

[[2019-09-14 at 3.13.00 PM.png]]
** Day 40 - Challange
Modify project 8 so that loading and parsing a level takes place in the background. Once you’re done, make sure you update the UI on the main thread!

I modified the loadLevel() function to be executed on a background thread. 

#+BEGIN_SRC Swift
DispatchQueue.global(qos: .userInitiated).async { [weak self] in
#+END_SRC

I had to unwrap some of the Optionals - as the project was compiling but the data was not loading:

#+BEGIN_SRC Swift
guard let currentLevel = self?.level else { return }
#+END_SRC

For the UI Updates, I reverted back to the Main Thread:

#+BEGIN_SRC Swift
            DispatchQueue.main.async { [weak self] in
                self?.cluesLabel.text = clueString.trimmingCharacters(in: .whitespacesAndNewlines)
                self?.answersLabel.text = solutionString.trimmingCharacters(in: .whitespacesAndNewlines)
                self?.letterButtons.shuffle()
                if self?.letterButtons.count  == letterBits.count {
                    guard let letterButtuonsCount = self?.letterButtons.count else { return }
                    for i in 0..<letterButtuonsCount {
                        self?.letterButtons[i].setTitle(letterBits[i], for: .normal)
                    }
                }
            }
#+END_SRC
